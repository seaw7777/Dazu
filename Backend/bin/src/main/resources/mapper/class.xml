<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.dazu.mapper.ClassMapper">
	<select id="selectAllClass" parameterType="string" resultType="Class">
		select c.class_max, c.class_time, c.classcode, c.mealkit_ok,c.food_type,c.class_difficult, c.class_name,c.class_describe, c.class_price, s.store_name as store_information_store_name, s.storecode as store_information_storecode, s.store_describe as store_information_store_describe 
		from class_information as c join store_information as s
		on c.store_information_storecode = s.storecode
		where c.store_information_storecode in (select storecode from store_information where dong = #{dong})
	</select>

	<select id="selectClass" parameterType="string" resultType="Class">
	select c.classcode, c.class_name, class_time, c.class_describe, c.class_difficult, c.mealkit_ok, c.food_type, s.storecode as store_information_storecode, s.store_name as store_information_store_name, ( s.store_grade / s.store_grade_cnt ) as store_information_store_grade, s.store_describe as store_information_store_describe, m.mealkit_price, c.class_max, c.class_price
        from class_information as c join store_information as s
        on c.store_information_storecode = s.storecode
        left join mealkit_store as m
        on c.classcode = m.class_information_classcode 
        where c.classcode = #{classcode};
	</select>
	
	<select id="selectClassTime" parameterType="string" resultType="ClassTime">
		select cti.* ,ci.class_name
		from class_time_information as cti,class_information as ci
		where class_information_classcode = #{classcode} and ci.classcode = #{classcode}
	</select>
	
	<insert id="insertClassTime" parameterType="ClassTime">
		insert into class_time_information (class_describe, class_starttime, class_endtime, class_date, class_information_classcode)
		values (#{class_describe}, #{class_starttime}, #{class_endtime}, #{class_date}, #{class_information_classcode})
	</insert>
	
	<update id="updateClassTime" parameterType="ClassTime">
		update class_time_information
		set class_describe = #{class_describe},
		class_starttime = #{class_starttime},
		class_endtime = #{class_endtime},
		class_url = #{class_url}
		where class_timecode = #{class_timecode}
	</update>
	
	<delete id="deleteClassTime" parameterType="string">
		delete from class_time_information
		where class_timecode = #{timecode}
	</delete>
	
	<insert id="insertClass" parameterType="Class">
		insert into class_information(class_max, class_name, class_time, class_difficult, mealkit_ok, food_type, class_price, store_information_storecode)
		values(#{class_max}, #{class_name}, #{class_time}, #{class_difficult}, #{mealkit_ok}, #{food_type}, #{class_price}, #{store_information_storecode})
	</insert>
	
	<delete id="deleteClass" parameterType="string">
		delete from class_information
		where classcode = #{classcode}
	</delete>
	
	<update id="updateClass" parameterType="Class">
		update class_information
		set class_max = #{class_max}, class_name = #{class_name}, class_time = #{class_time}, class_describe = #{class_describe}, class_difficult = #{class_difficult}, mealkit_ok = #{mealkit_ok}, food_type = #{food_type}, class_price = #{class_price}
		where classcode = #{classcode}
	</update>
	
	<select id="selectClassByStore" parameterType="string" resultType="Class">
		select *
		from class_information
		where store_information_storecode = #{storecode}
	</select>
	
	<select id="selectClassReview" parameterType="string" resultType="ClassReview">
		select member_usercode, class_review_write_datetime, class_review_code, class_review_point, class_review_describe, class_information_classcode, m.nickname as member_nickname
		from class_review as c join member as m 
		on c.member_usercode = m.usercode
		where class_information_classcode = #{classcode}
	</select>
	
	<select id="selectClassQnA" parameterType="string" resultType="ClassQnA">
		select (select s.member_usercode 
		from store_information as s join class_information as c
		on s.storecode = c.store_information_storecode
		where c.classcode = #{classcode}) as answer_usercode , image_url, class_qna_board_code, class_qna_baoard_write_datetime, class_qna_board_write_contents, class_qna_answer_write_content, m.nickname as member_nickname
		from class_qna_board as q join `member` as m
		on q.member_usercode = m.usercode
		where class_information_classcode = #{classcode}
	</select>
	
	<insert id="insertClassQnA" parameterType="ClassQnA">
		insert into class_qna_board (image_url, class_qna_board_write_contents, member_usercode, class_information_classcode)
		values (#{image_url}, #{class_qna_board_write_contents}, #{member_usercode}, #{class_information_classcode})
	</insert>
	
	<insert id="insertClassQnAAnswer" parameterType="ClassQnA">
		update class_qna_board
		set class_qna_answer_write_content = #{class_qna_answer_write_content}
		where class_qna_board_code = #{class_qna_board_code}
	</insert>
	
	<insert id="insertClassReview" parameterType="ClassReview">
		insert into class_review(member_usercode, class_review_point, class_review_describe, class_information_classcode)
		values(#{member_usercode}, #{class_review_point}, #{class_review_describe}, #{class_information_classcode})
	</insert>
	
	<insert id="insertClassRoom" parameterType="ClassRoom">
		insert into class_room(class_time_information_class_timecode, member_usercode, class_information_classcode)
		values(#{class_time_information_class_timecode}, #{member_usercode}, #{class_information_classcode})
	</insert>
	
	<select id="getclasscode" parameterType="Class" resultType="int">
		select classcode 
		from class_information
		where class_name = #{class_name} and store_information_storecode = #{store_information_storecode}
	</select>
</mapper>